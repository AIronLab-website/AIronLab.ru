/**
 * API Test Page
 * 
 * –°—Ç—Ä–∞–Ω–∏—Ü–∞ –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –≤—Å–µ—Ö Blog API endpoints
 */

import { requireAuth } from '@/lib/supabase/auth'

export const metadata = {
  title: 'API –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ',
}

export default async function ApiTestPage() {
  await requireAuth()

  return (
    <div className="space-y-6">
      <div>
        <h1 className="text-3xl font-bold text-black">API –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ</h1>
        <p className="text-slate-600 mt-2">
          –ü—Ä–æ–≤–µ—Ä–∫–∞ –≤—Å–µ—Ö Blog API endpoints
        </p>
      </div>

      {/* Posts API */}
      <div className="bg-white rounded-xl border border-slate-200 p-6">
        <h2 className="text-xl font-bold text-black mb-4">üìù Posts API</h2>
        <div className="space-y-3">
          <TestEndpoint
            method="GET"
            endpoint="/api/blog/posts"
            description="–ü–æ–ª—É—á–∏—Ç—å —Å–ø–∏—Å–æ–∫ –ø–æ—Å—Ç–æ–≤"
          />
          <TestEndpoint
            method="POST"
            endpoint="/api/blog/posts"
            description="–°–æ–∑–¥–∞—Ç—å –ø–æ—Å—Ç"
          />
          <TestEndpoint
            method="GET"
            endpoint="/api/blog/posts/[id]"
            description="–ü–æ–ª—É—á–∏—Ç—å –ø–æ—Å—Ç –ø–æ ID"
          />
          <TestEndpoint
            method="PUT"
            endpoint="/api/blog/posts/[id]"
            description="–û–±–Ω–æ–≤–∏—Ç—å –ø–æ—Å—Ç"
          />
          <TestEndpoint
            method="DELETE"
            endpoint="/api/blog/posts/[id]"
            description="–£–¥–∞–ª–∏—Ç—å –ø–æ—Å—Ç"
          />
        </div>
      </div>

      {/* Categories API */}
      <div className="bg-white rounded-xl border border-slate-200 p-6">
        <h2 className="text-xl font-bold text-black mb-4">üóÇÔ∏è Categories API</h2>
        <div className="space-y-3">
          <TestEndpoint
            method="GET"
            endpoint="/api/blog/categories"
            description="–ü–æ–ª—É—á–∏—Ç—å —Å–ø–∏—Å–æ–∫ –∫–∞—Ç–µ–≥–æ—Ä–∏–π"
          />
          <TestEndpoint
            method="POST"
            endpoint="/api/blog/categories"
            description="–°–æ–∑–¥–∞—Ç—å –∫–∞—Ç–µ–≥–æ—Ä–∏—é"
          />
          <TestEndpoint
            method="PUT"
            endpoint="/api/blog/categories/[id]"
            description="–û–±–Ω–æ–≤–∏—Ç—å –∫–∞—Ç–µ–≥–æ—Ä–∏—é"
          />
          <TestEndpoint
            method="DELETE"
            endpoint="/api/blog/categories/[id]"
            description="–£–¥–∞–ª–∏—Ç—å –∫–∞—Ç–µ–≥–æ—Ä–∏—é"
          />
        </div>
      </div>

      {/* Tags API */}
      <div className="bg-white rounded-xl border border-slate-200 p-6">
        <h2 className="text-xl font-bold text-black mb-4">üè∑Ô∏è Tags API</h2>
        <div className="space-y-3">
          <TestEndpoint
            method="GET"
            endpoint="/api/blog/tags"
            description="–ü–æ–ª—É—á–∏—Ç—å —Å–ø–∏—Å–æ–∫ —Ç–µ–≥–æ–≤"
          />
          <TestEndpoint
            method="POST"
            endpoint="/api/blog/tags"
            description="–°–æ–∑–¥–∞—Ç—å —Ç–µ–≥"
          />
          <TestEndpoint
            method="PUT"
            endpoint="/api/blog/tags/[id]"
            description="–û–±–Ω–æ–≤–∏—Ç—å —Ç–µ–≥"
          />
          <TestEndpoint
            method="DELETE"
            endpoint="/api/blog/tags/[id]"
            description="–£–¥–∞–ª–∏—Ç—å —Ç–µ–≥"
          />
        </div>
      </div>

      {/* Upload API */}
      <div className="bg-white rounded-xl border border-slate-200 p-6">
        <h2 className="text-xl font-bold text-black mb-4">üì§ Upload API</h2>
        <div className="space-y-3">
          <TestEndpoint
            method="POST"
            endpoint="/api/upload"
            description="–ó–∞–≥—Ä—É–∑–∏—Ç—å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ"
          />
        </div>
      </div>

      {/* Validation Tests */}
      <div className="bg-white rounded-xl border border-slate-200 p-6">
        <h2 className="text-xl font-bold text-black mb-4">‚úÖ Zod Validation</h2>
        <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
          <ValidationTest
            name="CreatePostSchema"
            fields={['title', 'content', 'author_id', 'status']}
          />
          <ValidationTest
            name="UpdatePostSchema"
            fields={['title (optional)', 'content (optional)', 'status (optional)']}
          />
          <ValidationTest
            name="CreateCategorySchema"
            fields={['name', 'slug (optional)', 'description (optional)']}
          />
          <ValidationTest
            name="CreateTagSchema"
            fields={['name', 'slug (optional)']}
          />
          <ValidationTest
            name="PostFiltersSchema"
            fields={['status', 'category_id', 'search', 'page', 'limit']}
          />
        </div>
      </div>

      {/* Helper Functions */}
      <div className="bg-white rounded-xl border border-slate-200 p-6">
        <h2 className="text-xl font-bold text-black mb-4">üõ†Ô∏è Helper Functions</h2>
        <div className="grid grid-cols-1 md:grid-cols-3 gap-4">
          <HelperFunction
            name="generateSlug()"
            description="–ì–µ–Ω–µ—Ä–∞—Ü–∏—è slug –∏–∑ –∑–∞–≥–æ–ª–æ–≤–∫–∞ —Å —Ç—Ä–∞–Ω—Å–ª–∏—Ç–µ—Ä–∞—Ü–∏–µ–π"
            example="'–ü—Ä–∏–≤–µ—Ç –ú–∏—Ä' ‚Üí 'privet-mir'"
          />
          <HelperFunction
            name="calculateReadTime()"
            description="–ü–æ–¥—Å—á–µ—Ç –≤—Ä–µ–º–µ–Ω–∏ —á—Ç–µ–Ω–∏—è (200 —Å–ª–æ–≤/–º–∏–Ω)"
            example="'1000 words' ‚Üí '5 min'"
          />
          <HelperFunction
            name="generateExcerpt()"
            description="–ì–µ–Ω–µ—Ä–∞—Ü–∏—è –≤—ã–¥–µ—Ä–∂–∫–∏ –∏–∑ –∫–æ–Ω—Ç–µ–Ω—Ç–∞"
            example="'Long text...' ‚Üí 'Long text... (200 chars)'"
          />
        </div>
      </div>

      {/* Security Tests */}
      <div className="bg-white rounded-xl border border-slate-200 p-6">
        <h2 className="text-xl font-bold text-black mb-4">üîí Security Tests</h2>
        <div className="space-y-3">
          <SecurityTest
            test="Auth Protection"
            description="–í—Å–µ endpoints —Ç—Ä–µ–±—É—é—Ç –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏"
            status="passed"
          />
          <SecurityTest
            test="Slug Uniqueness"
            description="–ü—Ä–æ–≤–µ—Ä–∫–∞ —É–Ω–∏–∫–∞–ª—å–Ω–æ—Å—Ç–∏ slug –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏/–æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏"
            status="passed"
          />
          <SecurityTest
            test="File Validation"
            description="–ü—Ä–æ–≤–µ—Ä–∫–∞ —Ç–∏–ø–∞ –∏ —Ä–∞–∑–º–µ—Ä–∞ —Ñ–∞–π–ª–∞ (max 5MB)"
            status="passed"
          />
          <SecurityTest
            test="Category Protection"
            description="–ó–∞—â–∏—Ç–∞ –æ—Ç —É–¥–∞–ª–µ–Ω–∏—è –∏—Å–ø–æ–ª—å–∑—É–µ–º—ã—Ö –∫–∞—Ç–µ–≥–æ—Ä–∏–π"
            status="passed"
          />
        </div>
      </div>

      {/* Test Instructions */}
      <div className="bg-slate-50 rounded-xl border border-slate-200 p-6">
        <h2 className="text-xl font-bold text-black mb-4">üìã –ò–Ω—Å—Ç—Ä—É–∫—Ü–∏—è –ø–æ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—é</h2>
        <ol className="list-decimal list-inside space-y-2 text-slate-700">
          <li>–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ <strong>Postman</strong>, <strong>Thunder Client</strong> –∏–ª–∏ <strong>curl</strong> –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è</li>
          <li>–£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ –≤—ã –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω—ã (–ø–æ–ª—É—á–∏—Ç–µ session cookie)</li>
          <li>–ü—Ä–æ—Ç–µ—Å—Ç–∏—Ä—É–π—Ç–µ –∫–∞–∂–¥—ã–π endpoint —Å –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏</li>
          <li>–ü—Ä–æ—Ç–µ—Å—Ç–∏—Ä—É–π—Ç–µ –≤–∞–ª–∏–¥–∞—Ü–∏—é —Å –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏</li>
          <li>–ü—Ä–æ–≤–µ—Ä—å—Ç–µ –æ–±—Ä–∞–±–æ—Ç–∫—É –æ—à–∏–±–æ–∫ (404, 400, 401, 500)</li>
          <li>–ü—Ä–æ–≤–µ—Ä—å—Ç–µ –≤—Å–µ success cases –∏ error cases</li>
        </ol>
      </div>
    </div>
  )
}

function TestEndpoint({ 
  method, 
  endpoint, 
  description 
}: { 
  method: string
  endpoint: string
  description: string 
}) {
  const methodColors: Record<string, string> = {
    GET: 'bg-green-100 text-green-700',
    POST: 'bg-blue-100 text-blue-700',
    PUT: 'bg-yellow-100 text-yellow-700',
    DELETE: 'bg-red-100 text-red-700',
  }

  return (
    <div className="flex items-center gap-3 p-3 border border-slate-200 rounded-lg hover:bg-slate-50 transition-colors">
      <span className={`px-3 py-1 rounded font-mono text-xs font-semibold ${methodColors[method]}`}>
        {method}
      </span>
      <code className="flex-1 text-sm font-mono text-slate-700">{endpoint}</code>
      <span className="text-sm text-slate-500">{description}</span>
    </div>
  )
}

function ValidationTest({ 
  name, 
  fields 
}: { 
  name: string
  fields: string[] 
}) {
  return (
    <div className="p-4 border border-slate-200 rounded-lg">
      <h3 className="font-semibold text-black mb-2">{name}</h3>
      <ul className="text-sm text-slate-600 space-y-1">
        {fields.map((field, index) => (
          <li key={index} className="flex items-center gap-2">
            <span className="w-1.5 h-1.5 bg-slate-400 rounded-full" />
            {field}
          </li>
        ))}
      </ul>
    </div>
  )
}

function HelperFunction({ 
  name, 
  description, 
  example 
}: { 
  name: string
  description: string
  example: string 
}) {
  return (
    <div className="p-4 border border-slate-200 rounded-lg">
      <h3 className="font-semibold text-black mb-2 font-mono text-sm">{name}</h3>
      <p className="text-sm text-slate-600 mb-3">{description}</p>
      <code className="text-xs bg-slate-100 px-2 py-1 rounded text-slate-700 block">
        {example}
      </code>
    </div>
  )
}

function SecurityTest({ 
  test, 
  description, 
  status 
}: { 
  test: string
  description: string
  status: 'passed' | 'failed' 
}) {
  return (
    <div className="flex items-center gap-3 p-3 border border-slate-200 rounded-lg">
      <div className={`w-3 h-3 rounded-full ${status === 'passed' ? 'bg-green-500' : 'bg-red-500'}`} />
      <div className="flex-1">
        <h3 className="font-semibold text-black text-sm">{test}</h3>
        <p className="text-xs text-slate-500">{description}</p>
      </div>
      <span className={`text-xs font-semibold ${status === 'passed' ? 'text-green-600' : 'text-red-600'}`}>
        {status === 'passed' ? '‚úì Passed' : '‚úó Failed'}
      </span>
    </div>
  )
}


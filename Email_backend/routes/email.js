const express = require('express');
const { getTransporter } = require('../config/emailConfig');
const { validateContactForm } = require('../validation/contactFormSchema');
const { generateContactEmailHtml, generateContactEmailText } = require('../templates/contactEmailTemplate');
const { asyncHandler } = require('../middleware/errorHandler');
const { logger } = require('../utils/logger');

const router = express.Router();

// POST /api/email/contact - –û—Ç–ø—Ä–∞–≤–∫–∞ —Ñ–æ—Ä–º—ã –æ–±—Ä–∞—Ç–Ω–æ–π —Å–≤—è–∑–∏
router.post('/contact', asyncHandler(async (req, res) => {
  logger.info('–ü–æ–ª—É—á–µ–Ω –∑–∞–ø—Ä–æ—Å –Ω–∞ –æ—Ç–ø—Ä–∞–≤–∫—É —Ñ–æ—Ä–º—ã –æ–±—Ä–∞—Ç–Ω–æ–π —Å–≤—è–∑–∏');

  // –î–æ–±–∞–≤–ª—è–µ–º –º–µ—Ç–∞–¥–∞–Ω–Ω—ã–µ
  const requestData = {
    ...req.body,
    referrer: req.get('Referer'),
    userAgent: req.get('User-Agent'),
    clientIP: req.ip || req.connection.remoteAddress
  };

  // –í–∞–ª–∏–¥–∞—Ü–∏—è –¥–∞–Ω–Ω—ã—Ö
  const validatedData = validateContactForm(requestData);
  logger.debug('–î–∞–Ω–Ω—ã–µ —Ñ–æ—Ä–º—ã –≤–∞–ª–∏–¥–∏—Ä–æ–≤–∞–Ω—ã:', {
    name: validatedData.name,
    email: validatedData.email,
    hasPhone: !!validatedData.phone,
    messageLength: validatedData.message.length
  });

  // –ü–æ–ª—É—á–∞–µ–º —Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç
  const transporter = await getTransporter();

  // –§–æ—Ä–º–∏—Ä—É–µ–º email
  const emailOptions = {
    from: {
      name: 'AIronLab Contact Form',
      address: process.env.EMAIL_FROM
    },
    to: process.env.EMAIL_TO,
    replyTo: {
      name: validatedData.name,
      address: validatedData.email
    },
    subject: `üöÄ –ù–æ–≤–∞—è –∑–∞—è–≤–∫–∞ –æ—Ç ${validatedData.name}`,
    html: generateContactEmailHtml(validatedData),
    text: generateContactEmailText(validatedData),
    headers: {
      'X-Priority': '1',
      'X-MSMail-Priority': 'High',
      'Importance': 'high'
    }
  };

  // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º email
  try {
    const info = await transporter.sendMail(emailOptions);
    
    logger.info('Email —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω:', {
      messageId: info.messageId,
      response: info.response,
      clientName: validatedData.name,
      clientEmail: validatedData.email
    });

    res.status(200).json({
      success: true,
      message: '–ó–∞—è–≤–∫–∞ —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞',
      messageId: info.messageId
    });

  } catch (emailError) {
    logger.error('–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ email:', emailError);
    
    // –û–±–æ–≥–∞—â–∞–µ–º –æ—à–∏–±–∫—É –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –¥–ª—è –ª—É—á—à–µ–π –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏
    if (emailError.code === 'EAUTH') {
      emailError.message = '–û—à–∏–±–∫–∞ –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏ SMTP. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏ –ø–∞—Ä–æ–ª—å.';
    } else if (emailError.code === 'ECONNECTION') {
      emailError.message = '–û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ SMTP —Å–µ—Ä–≤–µ—Ä—É. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ —Ö–æ—Å—Ç–∞ –∏ –ø–æ—Ä—Ç–∞.';
    } else if (emailError.code === 'ETIMEDOUT') {
      emailError.message = '–¢–∞–π–º–∞—É—Ç –ø—Ä–∏ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–∏ –∫ SMTP —Å–µ—Ä–≤–µ—Ä—É.';
    }
    
    throw emailError;
  }
}));

// GET /api/email/test - –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ email –Ω–∞—Å—Ç—Ä–æ–µ–∫ (—Ç–æ–ª—å–∫–æ –¥–ª—è —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏)
router.get('/test', asyncHandler(async (req, res) => {
  if (process.env.NODE_ENV !== 'development') {
    return res.status(404).json({ error: '–ú–∞—Ä—à—Ä—É—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω' });
  }

  logger.info('–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ email –Ω–∞—Å—Ç—Ä–æ–µ–∫...');

  const transporter = await getTransporter();
  
  // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ
  const isConnected = await transporter.verify();
  
  if (isConnected) {
    logger.info('‚úÖ SMTP —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ —Ä–∞–±–æ—Ç–∞–µ—Ç');
    
    // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ç–µ—Å—Ç–æ–≤–æ–µ –ø–∏—Å—å–º–æ
    const testEmail = {
      from: process.env.EMAIL_FROM,
      to: process.env.EMAIL_TO,
      subject: 'üß™ –¢–µ—Å—Ç–æ–≤–æ–µ –ø–∏—Å—å–º–æ AIronLab',
      html: `
        <h2>–¢–µ—Å—Ç–æ–≤–æ–µ –ø–∏—Å—å–º–æ</h2>
        <p>–ï—Å–ª–∏ –≤—ã –ø–æ–ª—É—á–∏–ª–∏ —ç—Ç–æ –ø–∏—Å—å–º–æ, –∑–Ω–∞—á–∏—Ç –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ SMTP —Ä–∞–±–æ—Ç–∞—é—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ!</p>
        <p><strong>–í—Ä–µ–º—è –æ—Ç–ø—Ä–∞–≤–∫–∏:</strong> ${new Date().toLocaleString('ru-RU')}</p>
        <p><strong>–°–µ—Ä–≤–µ—Ä:</strong> ${process.env.SMTP_HOST}:${process.env.SMTP_PORT}</p>
      `,
      text: '–¢–µ—Å—Ç–æ–≤–æ–µ –ø–∏—Å—å–º–æ. SMTP –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ —Ä–∞–±–æ—Ç–∞—é—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ!'
    };

    const info = await transporter.sendMail(testEmail);
    
    res.status(200).json({
      success: true,
      message: '–¢–µ—Å—Ç–æ–≤–æ–µ –ø–∏—Å—å–º–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ',
      connectionValid: true,
      messageId: info.messageId,
      smtp: {
        host: process.env.SMTP_HOST,
        port: process.env.SMTP_PORT,
        secure: process.env.SMTP_SECURE === 'true'
      }
    });
  } else {
    res.status(500).json({
      success: false,
      message: '–û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ SMTP —Å–µ—Ä–≤–µ—Ä—É',
      connectionValid: false
    });
  }
}));

// GET /api/email/status - –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç–∞—Ç—É—Å–∞ email —Å–µ—Ä–≤–∏—Å–∞
router.get('/status', asyncHandler(async (req, res) => {
  logger.info('–ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç–∞—Ç—É—Å–∞ email —Å–µ—Ä–≤–∏—Å–∞');
  
  try {
    const transporter = await getTransporter();
    const isConnected = await transporter.verify();
    
    res.status(200).json({
      status: 'operational',
      smtp: {
        connected: isConnected,
        host: process.env.SMTP_HOST,
        port: process.env.SMTP_PORT,
        secure: process.env.SMTP_SECURE === 'true'
      },
      timestamp: new Date().toISOString()
    });
  } catch (error) {
    logger.error('–û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å—Ç–∞—Ç—É—Å–∞:', error);
    
    res.status(500).json({
      status: 'error',
      error: error.message,
      timestamp: new Date().toISOString()
    });
  }
}));

module.exports = router; 
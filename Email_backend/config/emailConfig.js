const nodemailer = require('nodemailer');
const { logger } = require('../utils/logger');

// –°–æ–∑–¥–∞–µ–º —Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç –¥–ª—è —Ä–µ–≥.—Ä—É
const createTransporter = () => {
  const config = {
    host: process.env.SMTP_HOST || 'mail.hosting.reg.ru',
    port: parseInt(process.env.SMTP_PORT) || 465,
    secure: process.env.SMTP_PORT === '465', // true –¥–ª—è 465, false –¥–ª—è –¥—Ä—É–≥–∏—Ö
    auth: {
      user: process.env.SMTP_USER,
      pass: process.env.SMTP_PASS
    },
    // –£–ø—Ä–æ—â–µ–Ω–Ω—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –¥–ª—è –±–∞–∑–æ–≤–æ–≥–æ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
    pool: false, // –û—Ç–∫–ª—é—á–∞–µ–º –ø—É–ª –¥–ª—è –ø—Ä–æ—Å—Ç–æ—Ç—ã
    // –£–≤–µ–ª–∏—á–µ–Ω–Ω—ã–µ —Ç–∞–π–º–∞—É—Ç—ã
    connectionTimeout: 60000, // 60 —Å–µ–∫—É–Ω–¥
    greetingTimeout: 60000, // 60 —Å–µ–∫—É–Ω–¥  
    socketTimeout: 60000, // 60 —Å–µ–∫—É–Ω–¥
    // –ü—Ä–æ—Å—Ç—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ TLS
    tls: {
      rejectUnauthorized: false
    },
    // –û—Ç–ª–∞–¥–∫–∞
    debug: true,
    logger: true
  };
  
  logger.info('üîß –°–æ–∑–¥–∞–Ω–∏–µ SMTP —Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç–∞:', {
    host: config.host,
    port: config.port,
    secure: config.secure,
    user: config.auth.user
  });

  return nodemailer.createTransport(config);
};

// –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ
const verifyConnection = async (transporter) => {
  try {
    logger.info('üîç –ü—Ä–æ–≤–µ—Ä—è–µ–º SMTP —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ...');
    await transporter.verify();
    logger.info('‚úÖ SMTP —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ –ø—Ä–æ–≤–µ—Ä–µ–Ω–æ —É—Å–ø–µ—à–Ω–æ');
    return true;
  } catch (error) {
    logger.error('‚ùå –û—à–∏–±–∫–∞ SMTP —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è:', {
      message: error.message,
      code: error.code,
      command: error.command
    });
    return false;
  }
};

// –ï–¥–∏–Ω—Å—Ç–≤–µ–Ω–Ω—ã–π —ç–∫–∑–µ–º–ø–ª—è—Ä —Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç–∞
let transporter = null;

const getTransporter = async () => {
  if (!transporter) {
    transporter = createTransporter();
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ —Ç–æ–ª—å–∫–æ –≤ development —Ä–µ–∂–∏–º–µ
    if (process.env.NODE_ENV === 'development') {
      await verifyConnection(transporter);
    }
  }
  
  return transporter;
};

module.exports = { getTransporter, verifyConnection }; 
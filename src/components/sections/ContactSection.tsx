'use client';

import { useState } from 'react';
import { FaTelegramPlane } from 'react-icons/fa';
import { SiHabr } from 'react-icons/si';
import { useContactForm } from '@/hooks/useContactForm';

interface ContactForm {
  name: string;
  email: string;
  phone: string;
  message: string;
  agreement: boolean;
}

interface FormErrors {
  name?: string;
  email?: string;
  phone?: string;
  message?: string;
  agreement?: string;
}

export default function ContactSection() {
  const [formData, setFormData] = useState<ContactForm>({
    name: '',
    email: '',
    phone: '',
    message: '',
    agreement: false,
  });

  const [errors, setErrors] = useState<FormErrors>({});
  const { isSubmitting, isSuccess, error, submitForm, resetForm } = useContactForm();

  const validateForm = (): boolean => {
    const newErrors: FormErrors = {};

    // –í–∞–ª–∏–¥–∞—Ü–∏—è –∏–º–µ–Ω–∏
    if (!formData.name.trim()) {
      newErrors.name = '–ò–º—è –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ –¥–ª—è –∑–∞–ø–æ–ª–Ω–µ–Ω–∏—è';
    } else if (formData.name.trim().length < 2) {
      newErrors.name = '–ò–º—è –¥–æ–ª–∂–Ω–æ —Å–æ–¥–µ—Ä–∂–∞—Ç—å –º–∏–Ω–∏–º—É–º 2 —Å–∏–º–≤–æ–ª–∞';
    }

    // –í–∞–ª–∏–¥–∞—Ü–∏—è email
    const emailRegex = /^[^\s@]+@[^\s@]+\.[^\s@]+$/;
    if (!formData.email.trim()) {
      newErrors.email = 'Email –æ–±—è–∑–∞—Ç–µ–ª–µ–Ω –¥–ª—è –∑–∞–ø–æ–ª–Ω–µ–Ω–∏—è';
    } else if (!emailRegex.test(formData.email)) {
      newErrors.email = '–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π email –∞–¥—Ä–µ—Å';
    }

    // –í–∞–ª–∏–¥–∞—Ü–∏—è —Ç–µ–ª–µ—Ñ–æ–Ω–∞ (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ, –Ω–æ –µ—Å–ª–∏ –∑–∞–ø–æ–ª–Ω–µ–Ω - –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–º)
    if (formData.phone.trim()) {
      const phoneRegex = /^\+?[\d\s\-\(\)]{10,20}$/;
      if (!phoneRegex.test(formData.phone)) {
        newErrors.phone = '–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞';
      }
    }

    // –í–∞–ª–∏–¥–∞—Ü–∏—è —Å–æ–æ–±—â–µ–Ω–∏—è
    if (!formData.message.trim()) {
      newErrors.message = '–°–æ–æ–±—â–µ–Ω–∏–µ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ –¥–ª—è –∑–∞–ø–æ–ª–Ω–µ–Ω–∏—è';
    } else if (formData.message.trim().length < 10) {
      newErrors.message = '–°–æ–æ–±—â–µ–Ω–∏–µ –¥–æ–ª–∂–Ω–æ —Å–æ–¥–µ—Ä–∂–∞—Ç—å –º–∏–Ω–∏–º—É–º 10 —Å–∏–º–≤–æ–ª–æ–≤';
    }

    // –í–∞–ª–∏–¥–∞—Ü–∏—è —Å–æ–≥–ª–∞—Å–∏—è
    if (!formData.agreement) {
      newErrors.agreement = '–ù–µ–æ–±—Ö–æ–¥–∏–º–æ —Å–æ–≥–ª–∞—Å–∏–µ –Ω–∞ –æ–±—Ä–∞–±–æ—Ç–∫—É –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö';
    }

    setErrors(newErrors);
    return Object.keys(newErrors).length === 0;
  };

  const handleInputChange = (field: keyof ContactForm, value: string | boolean) => {
    setFormData(prev => ({ ...prev, [field]: value }));
    
    // –û—á–∏—â–∞–µ–º –æ—à–∏–±–∫—É –ø—Ä–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–∏ –ø–æ–ª—è
    if (errors[field]) {
      setErrors(prev => ({ ...prev, [field]: undefined }));
    }
  };

  const handleSubmit = async (e: React.FormEvent) => {
    e.preventDefault();
    
    if (!validateForm()) {
      return;
    }

    try {
      await submitForm({
        name: formData.name.trim(),
        email: formData.email.trim(),
        phone: formData.phone.trim() || undefined,
        message: formData.message.trim(),
        agreement: formData.agreement,
      });

      // –ï—Å–ª–∏ —É—Å–ø–µ—à–Ω–æ - –æ—á–∏—â–∞–µ–º —Ñ–æ—Ä–º—É
      if (!error) {
        setFormData({
          name: '',
          email: '',
          phone: '',
          message: '',
          agreement: false,
        });
      }
    } catch (err) {
      console.error('Form submission error:', err);
    }
  };

  // –ï—Å–ª–∏ —Ñ–æ—Ä–º–∞ —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞
  if (isSuccess) {
    return (
      <section id="contact" className="py-32 bg-gradient-to-br from-gray-900 via-blue-900 to-purple-900">
        <div className="container mx-auto px-6">
          <div className="max-w-4xl mx-auto text-center">
            <div className="bg-white/10 backdrop-blur-md rounded-2xl p-12 border border-white/20">
              <div className="text-6xl mb-6">‚úÖ</div>
              <h2 className="text-4xl font-bold text-white mb-6">
                –ó–∞—è–≤–∫–∞ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞!
              </h2>
              <p className="text-xl text-blue-100 mb-8">
                –°–ø–∞—Å–∏–±–æ –∑–∞ –æ–±—Ä–∞—â–µ–Ω–∏–µ! –ú—ã –ø–æ–ª—É—á–∏–ª–∏ –≤–∞—à—É –∑–∞—è–≤–∫—É –∏ —Å–≤—è–∂–µ–º—Å—è —Å –≤–∞–º–∏ –≤ –±–ª–∏–∂–∞–π—à–µ–µ –≤—Ä–µ–º—è.
              </p>
              <div className="grid md:grid-cols-2 gap-6 text-left">
                <div className="bg-white/5 rounded-xl p-6">
                  <h3 className="text-white font-semibold mb-3">‚è∞ –ß—Ç–æ –¥–∞–ª—å—à–µ?</h3>
                  <ul className="text-blue-100 space-y-2 text-sm">
                    <li>‚Ä¢ –ú—ã –∏–∑—É—á–∏–º –≤–∞—à –∑–∞–ø—Ä–æ—Å –≤ —Ç–µ—á–µ–Ω–∏–µ 2 —á–∞—Å–æ–≤</li>
                    <li>‚Ä¢ –°–≤—è–∂–µ–º—Å—è –¥–ª—è —É—Ç–æ—á–Ω–µ–Ω–∏—è –¥–µ—Ç–∞–ª–µ–π</li>
                    <li>‚Ä¢ –ü–æ–¥–≥–æ—Ç–æ–≤–∏–º –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω–æ–µ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ</li>
                  </ul>
                </div>
                <div className="bg-white/5 rounded-xl p-6">
                  <h3 className="text-white font-semibold mb-3">üìû –°—Ä–æ—á–Ω–∞—è —Å–≤—è–∑—å</h3>
                  <div className="text-blue-100 space-y-2 text-sm">
                    <p>Telegram: @aironlab_support</p>
                    <p>Email: info@aironlab.ru</p>
                    <p>–í—Ä–µ–º—è —Ä–∞–±–æ—Ç—ã: 9:00-18:00 –ú–°–ö</p>
                  </div>
                </div>
              </div>
              <button
                onClick={() => {
                  resetForm();
                }}
                className="mt-8 px-8 py-3 bg-blue-600 hover:bg-blue-700 text-white rounded-xl transition-colors"
              >
                –û—Ç–ø—Ä–∞–≤–∏—Ç—å –µ—â–µ –æ–¥–Ω—É –∑–∞—è–≤–∫—É
              </button>
            </div>
          </div>
        </div>
      </section>
    );
  }

  return (
    <section id="contact" className="py-32 bg-gradient-to-br from-gray-900 via-blue-900 to-purple-900">
      <div className="container mx-auto px-6">
        <div className="max-w-6xl mx-auto">
          <div className="text-center mb-16">
            <h2 className="text-5xl font-bold text-white mb-6">
              –î–∞–≤–∞–π—Ç–µ –æ–±—Å—É–¥–∏–º –≤–∞—à –ø—Ä–æ–µ–∫—Ç
            </h2>
            <p className="text-xl text-blue-100 max-w-3xl mx-auto">
              –†–∞—Å—Å–∫–∞–∂–∏—Ç–µ –æ —Å–≤–æ–∏—Ö –∑–∞–¥–∞—á–∞—Ö, –∏ –º—ã –ø—Ä–µ–¥–ª–æ–∂–∏–º —ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ–µ —Ä–µ—à–µ–Ω–∏–µ –Ω–∞ –æ—Å–Ω–æ–≤–µ –ò–ò
            </p>
          </div>

          <div className="grid lg:grid-cols-2 gap-12">
            {/* –ö–æ–Ω—Ç–∞–∫—Ç–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è */}
            <div className="space-y-8">
              <div className="bg-white/10 backdrop-blur-md rounded-2xl p-8 border border-white/20">
                <h3 className="text-2xl font-bold text-white mb-6">–ö–æ–Ω—Ç–∞–∫—Ç–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è</h3>
                
                <div className="space-y-6">
                  <div className="flex items-center space-x-4">
                    <div className="w-12 h-12 bg-blue-600 rounded-xl flex items-center justify-center">
                      <svg className="w-6 h-6 text-white" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                        <path strokeLinecap="round" strokeLinejoin="round" strokeWidth="2" d="M3 8l7.89 4.05a2 2 0 002.22 0L21 8M5 19h14a2 2 0 002-2V7a2 2 0 00-2-2H5a2 2 0 00-2 2v10a2 2 0 002 2z"></path>
                      </svg>
                    </div>
                    <div>
                      <p className="text-white font-semibold">Email</p>
                      <p className="text-blue-100">info@aironlab.ru</p>
                    </div>
                  </div>

                  <div className="flex items-center space-x-4">
                    <div className="w-12 h-12 bg-green-600 rounded-xl flex items-center justify-center">
                      <FaTelegramPlane className="w-6 h-6 text-white" />
                    </div>
                    <div>
                      <p className="text-white font-semibold">Telegram</p>
                      <p className="text-blue-100">@aironlab_team</p>
                    </div>
                  </div>

                  <div className="flex items-center space-x-4">
                    <div className="w-12 h-12 bg-orange-600 rounded-xl flex items-center justify-center">
                      <SiHabr className="w-6 h-6 text-white" />
                    </div>
                    <div>
                      <p className="text-white font-semibold">Habr</p>
                      <p className="text-blue-100">@aironlab</p>
                    </div>
                  </div>
                </div>

                <div className="mt-8 p-6 bg-white/5 rounded-xl">
                  <h4 className="text-white font-semibold mb-3">‚ö° –ë—ã—Å—Ç—Ä–∞—è –ø–æ–º–æ—â—å</h4>
                  <p className="text-blue-100 text-sm">
                    –û—Ç–≤–µ—Ç–∏–º –≤ —Ç–µ—á–µ–Ω–∏–µ 2 —á–∞—Å–æ–≤ –≤ —Ä–∞–±–æ—á–µ–µ –≤—Ä–µ–º—è (9:00-18:00 –ú–°–ö).
                    –í —Å—Ä–æ—á–Ω—ã—Ö —Å–ª—É—á–∞—è—Ö –ø–∏—à–∏—Ç–µ –≤ Telegram.
                  </p>
                </div>
              </div>
            </div>

            {/* –§–æ—Ä–º–∞ */}
            <div className="bg-white/10 backdrop-blur-md rounded-2xl p-8 border border-white/20">
              <h3 className="text-2xl font-bold text-white mb-6">–û—Ç–ø—Ä–∞–≤–∏—Ç—å –∑–∞—è–≤–∫—É</h3>
              
              {error && (
                <div className="mb-6 p-4 bg-red-500/20 border border-red-500/30 rounded-xl">
                  <p className="text-red-200 text-sm">{error}</p>
                </div>
              )}

              <form onSubmit={handleSubmit} className="space-y-6">
                <div>
                  <label htmlFor="name" className="block text-sm font-medium text-white mb-2">
                    –ò–º—è *
                  </label>
                  <input
                    type="text"
                    id="name"
                    value={formData.name}
                    onChange={(e) => handleInputChange('name', e.target.value)}
                    className={`w-full px-4 py-3 bg-white/10 border rounded-xl text-white placeholder-gray-300 focus:outline-none focus:ring-2 focus:ring-blue-500 transition-colors ${
                      errors.name ? 'border-red-500' : 'border-white/20'
                    }`}
                    placeholder="–í–∞—à–µ –∏–º—è"
                    disabled={isSubmitting}
                  />
                  {errors.name && <p className="mt-1 text-sm text-red-400">{errors.name}</p>}
                </div>

                <div>
                  <label htmlFor="email" className="block text-sm font-medium text-white mb-2">
                    Email *
                  </label>
                  <input
                    type="email"
                    id="email"
                    value={formData.email}
                    onChange={(e) => handleInputChange('email', e.target.value)}
                    className={`w-full px-4 py-3 bg-white/10 border rounded-xl text-white placeholder-gray-300 focus:outline-none focus:ring-2 focus:ring-blue-500 transition-colors ${
                      errors.email ? 'border-red-500' : 'border-white/20'
                    }`}
                    placeholder="your@email.com"
                    disabled={isSubmitting}
                  />
                  {errors.email && <p className="mt-1 text-sm text-red-400">{errors.email}</p>}
                </div>

                <div>
                  <label htmlFor="phone" className="block text-sm font-medium text-white mb-2">
                    –¢–µ–ª–µ—Ñ–æ–Ω
                  </label>
                  <input
                    type="tel"
                    id="phone"
                    value={formData.phone}
                    onChange={(e) => handleInputChange('phone', e.target.value)}
                    className={`w-full px-4 py-3 bg-white/10 border rounded-xl text-white placeholder-gray-300 focus:outline-none focus:ring-2 focus:ring-blue-500 transition-colors ${
                      errors.phone ? 'border-red-500' : 'border-white/20'
                    }`}
                    placeholder="+7 (999) 123-45-67"
                    disabled={isSubmitting}
                  />
                  {errors.phone && <p className="mt-1 text-sm text-red-400">{errors.phone}</p>}
                </div>

                <div>
                  <label htmlFor="message" className="block text-sm font-medium text-white mb-2">
                    –°–æ–æ–±—â–µ–Ω–∏–µ *
                  </label>
                  <textarea
                    id="message"
                    rows={6}
                    value={formData.message}
                    onChange={(e) => handleInputChange('message', e.target.value)}
                    className={`w-full px-4 py-3 bg-white/10 border rounded-xl text-white placeholder-gray-300 focus:outline-none focus:ring-2 focus:ring-blue-500 resize-none transition-colors ${
                      errors.message ? 'border-red-500' : 'border-white/20'
                    }`}
                    placeholder="–†–∞—Å—Å–∫–∞–∂–∏—Ç–µ –æ –≤–∞—à–µ–º –ø—Ä–æ–µ–∫—Ç–µ, –∑–∞–¥–∞—á–∞—Ö –∏ –æ–∂–∏–¥–∞–Ω–∏—è—Ö..."
                    disabled={isSubmitting}
                  />
                  {errors.message && <p className="mt-1 text-sm text-red-400">{errors.message}</p>}
                </div>

                <div className="flex items-start space-x-3">
                  <input
                    type="checkbox"
                    id="agreement"
                    checked={formData.agreement}
                    onChange={(e) => handleInputChange('agreement', e.target.checked)}
                    className="mt-0.5 w-4 h-4 text-blue-600 bg-white/10 border-white/20 rounded focus:ring-blue-500 focus:ring-2"
                    disabled={isSubmitting}
                  />
                  <label htmlFor="agreement" className="text-sm text-blue-100">
                    –Ø —Å–æ–≥–ª–∞—Å–µ–Ω –Ω–∞{' '}
                    <a href="/privacy" className="text-blue-400 hover:text-blue-300 underline">
                      –æ–±—Ä–∞–±–æ—Ç–∫—É –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
                    </a>{' '}
                    –∏ –ø–æ–ª—É—á–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–æ–Ω–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π *
                  </label>
                </div>
                {errors.agreement && <p className="text-sm text-red-400">{errors.agreement}</p>}

                <button
                  type="submit"
                  disabled={isSubmitting}
                  className="w-full py-4 bg-gradient-to-r from-blue-600 to-purple-600 hover:from-blue-700 hover:to-purple-700 disabled:from-gray-500 disabled:to-gray-600 disabled:cursor-not-allowed text-white font-semibold rounded-xl transition-all duration-300 transform hover:scale-105 disabled:scale-100"
                >
                  {isSubmitting ? (
                    <span className="flex items-center justify-center">
                      <svg className="animate-spin -ml-1 mr-3 h-5 w-5 text-white" xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24">
                        <circle className="opacity-25" cx="12" cy="12" r="10" stroke="currentColor" strokeWidth="4"></circle>
                        <path className="opacity-75" fill="currentColor" d="M4 12a8 8 0 018-8V0C5.373 0 0 5.373 0 12h4zm2 5.291A7.962 7.962 0 014 12H0c0 3.042 1.135 5.824 3 7.938l3-2.647z"></path>
                      </svg>
                      –û—Ç–ø—Ä–∞–≤–ª—è–µ–º...
                    </span>
                  ) : (
                    '–û—Ç–ø—Ä–∞–≤–∏—Ç—å –∑–∞—è–≤–∫—É'
                  )}
                </button>
              </form>

              <div className="mt-6 text-center">
                <p className="text-xs text-blue-100">
                  –ù–∞–∂–∏–º–∞—è –∫–Ω–æ–ø–∫—É, –≤—ã —Å–æ–≥–ª–∞—à–∞–µ—Ç–µ—Å—å —Å —É—Å–ª–æ–≤–∏—è–º–∏ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –¥–∞–Ω–Ω—ã—Ö
                </p>
              </div>
            </div>
          </div>
        </div>
      </div>
    </section>
  );
} 